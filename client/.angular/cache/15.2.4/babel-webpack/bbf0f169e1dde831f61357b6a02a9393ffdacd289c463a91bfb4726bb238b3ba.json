{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\nimport { NgxMatDateAdapter, NGX_MAT_DATE_FORMATS } from '@angular-material-components/datetime-picker';\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nconst moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\nconst NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n  providedIn: 'root',\n  factory: NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n  return {\n    useUtc: false\n  };\n}\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\nlet NgxMatMomentAdapter = /*#__PURE__*/(() => {\n  class NgxMatMomentAdapter extends NgxMatDateAdapter {\n    constructor(dateLocale, _options) {\n      super();\n      this._options = _options;\n      this.setLocale(dateLocale || moment.locale());\n    }\n    setLocale(locale) {\n      super.setLocale(locale);\n      let momentLocaleData = moment.localeData(locale);\n      this._localeData = {\n        firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n        longMonths: momentLocaleData.months(),\n        shortMonths: momentLocaleData.monthsShort(),\n        dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\n        longDaysOfWeek: momentLocaleData.weekdays(),\n        shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n        narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n      };\n    }\n    getYear(date) {\n      return this.clone(date).year();\n    }\n    getMonth(date) {\n      return this.clone(date).month();\n    }\n    getDate(date) {\n      return this.clone(date).date();\n    }\n    getDayOfWeek(date) {\n      return this.clone(date).day();\n    }\n    getMonthNames(style) {\n      // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n      return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n    getDateNames() {\n      return this._localeData.dates;\n    }\n    getDayOfWeekNames(style) {\n      if (style == 'long') {\n        return this._localeData.longDaysOfWeek;\n      }\n      if (style == 'short') {\n        return this._localeData.shortDaysOfWeek;\n      }\n      return this._localeData.narrowDaysOfWeek;\n    }\n    getYearName(date) {\n      return this.clone(date).format('YYYY');\n    }\n    getFirstDayOfWeek() {\n      return this._localeData.firstDayOfWeek;\n    }\n    getNumDaysInMonth(date) {\n      return this.clone(date).daysInMonth();\n    }\n    clone(date) {\n      return date.clone().locale(this.locale);\n    }\n    createDate(year, month, date) {\n      // Moment.js will create an invalid date if any of the components are out of bounds, but we\n      // explicitly check each case so we can throw more descriptive errors.\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n      const result = this._createMoment({\n        year,\n        month,\n        date\n      }).locale(this.locale);\n      // If the result isn't valid, the date must have been out of bounds for this month.\n      if (!result.isValid()) {\n        throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n      }\n      return result;\n    }\n    today() {\n      return this._createMoment().locale(this.locale);\n    }\n    parse(value, parseFormat) {\n      if (value && typeof value == 'string') {\n        return this._createMoment(value, parseFormat, this.locale);\n      }\n      return value ? this._createMoment(value).locale(this.locale) : null;\n    }\n    format(date, displayFormat) {\n      date = this.clone(date);\n      if (!this.isValid(date)) {\n        throw Error('MomentDateAdapter: Cannot format invalid date.');\n      }\n      return date.format(displayFormat);\n    }\n    addCalendarYears(date, years) {\n      return this.clone(date).add({\n        years\n      });\n    }\n    addCalendarMonths(date, months) {\n      return this.clone(date).add({\n        months\n      });\n    }\n    addCalendarDays(date, days) {\n      return this.clone(date).add({\n        days\n      });\n    }\n    toIso8601(date) {\n      return this.clone(date).format();\n    }\n    /**\r\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n     * string into null. Returns an invalid date for all other values.\r\n     */\n    deserialize(value) {\n      let date;\n      if (value instanceof Date) {\n        date = this._createMoment(value).locale(this.locale);\n      } else if (this.isDateInstance(value)) {\n        // Note: assumes that cloning also sets the correct locale.\n        return this.clone(value);\n      }\n      if (typeof value === 'string') {\n        if (!value) {\n          return null;\n        }\n        date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n      }\n      if (date && this.isValid(date)) {\n        return this._createMoment(date).locale(this.locale);\n      }\n      return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n      return moment.isMoment(obj);\n    }\n    isValid(date) {\n      return this.clone(date).isValid();\n    }\n    invalid() {\n      return moment.invalid();\n    }\n    getHour(date) {\n      return date.hours();\n    }\n    getMinute(date) {\n      return date.minutes();\n    }\n    getSecond(date) {\n      return date.seconds();\n    }\n    setHour(date, value) {\n      date.hours(value);\n    }\n    setMinute(date, value) {\n      date.minutes(value);\n    }\n    setSecond(date, value) {\n      date.seconds(value);\n    }\n    /** Creates a Moment instance while respecting the current UTC settings. */\n    _createMoment(date, format, locale) {\n      const {\n        strict,\n        useUtc\n      } = this._options || {};\n      return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n    }\n  }\n  /** @nocollapse */NgxMatMomentAdapter.ɵfac = function NgxMatMomentAdapter_Factory(t) {\n    return new (t || NgxMatMomentAdapter)(i0.ɵɵinject(MAT_DATE_LOCALE, 8), i0.ɵɵinject(NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, 8));\n  };\n  /** @nocollapse */\n  NgxMatMomentAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxMatMomentAdapter,\n    factory: NgxMatMomentAdapter.ɵfac\n  });\n  return NgxMatMomentAdapter;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nconst DEFAULT_DATE_INPUT = 'l, LTS';\nconst NGX_MAT_MOMENT_FORMATS = {\n  parse: {\n    dateInput: DEFAULT_DATE_INPUT\n  },\n  display: {\n    dateInput: DEFAULT_DATE_INPUT,\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY'\n  }\n};\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nlet NgxMomentDateModule = /*#__PURE__*/(() => {\n  class NgxMomentDateModule {}\n  /** @nocollapse */NgxMomentDateModule.ɵfac = function NgxMomentDateModule_Factory(t) {\n    return new (t || NgxMomentDateModule)();\n  };\n  /** @nocollapse */\n  NgxMomentDateModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxMomentDateModule\n  });\n  /** @nocollapse */\n  NgxMomentDateModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: NgxMatDateAdapter,\n      useClass: NgxMatMomentAdapter,\n      deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n    }]\n  });\n  return NgxMomentDateModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgxMatMomentModule = /*#__PURE__*/(() => {\n  class NgxMatMomentModule {}\n  /** @nocollapse */NgxMatMomentModule.ɵfac = function NgxMatMomentModule_Factory(t) {\n    return new (t || NgxMatMomentModule)();\n  };\n  /** @nocollapse */\n  NgxMatMomentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxMatMomentModule\n  });\n  /** @nocollapse */\n  NgxMatMomentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: NGX_MAT_DATE_FORMATS,\n      useValue: NGX_MAT_MOMENT_FORMATS\n    }],\n    imports: [NgxMomentDateModule]\n  });\n  return NgxMatMomentModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\r\n * Public API Surface of ngx-mat-moment-adapter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, NGX_MAT_MOMENT_FORMATS, NgxMatMomentAdapter, NgxMatMomentModule, NgxMomentDateModule };\n//# sourceMappingURL=angular-material-components-moment-adapter.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}