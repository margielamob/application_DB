{"version":3,"file":"angular-material-components-datetime-picker.mjs","sources":["../../../../projects/datetime-picker/src/lib/core/date-formats.ts","../../../../projects/datetime-picker/src/lib/calendar-body.ts","../../../../projects/datetime-picker/src/lib/calendar-body.html","../../../../projects/datetime-picker/src/lib/core/date-adapter.ts","../../../../projects/datetime-picker/src/lib/date-range-selection-strategy.ts","../../../../projects/datetime-picker/src/lib/utils/date-utils.ts","../../../../projects/datetime-picker/src/lib/month-view.ts","../../../../projects/datetime-picker/src/lib/month-view.html","../../../../projects/datetime-picker/src/lib/multi-year-view.ts","../../../../projects/datetime-picker/src/lib/multi-year-view.html","../../../../projects/datetime-picker/src/lib/year-view.ts","../../../../projects/datetime-picker/src/lib/year-view.html","../../../../projects/datetime-picker/src/lib/calendar.ts","../../../../projects/datetime-picker/src/lib/calendar-header.html","../../../../projects/datetime-picker/src/lib/calendar.html","../../../../projects/datetime-picker/src/lib/timepicker.component.ts","../../../../projects/datetime-picker/src/lib/timepicker.component.html","../../../../projects/datetime-picker/src/lib/datetime-picker.component.ts","../../../../projects/datetime-picker/src/lib/datetime-content.component.html","../../../../projects/datetime-picker/src/lib/datetime-input.ts","../../../../projects/datetime-picker/src/lib/timepicker.module.ts","../../../../projects/datetime-picker/src/lib/datetime-picker.module.ts","../../../../projects/datetime-picker/src/lib/core/native-date-adapter.ts","../../../../projects/datetime-picker/src/lib/core/native-date-formats.ts","../../../../projects/datetime-picker/src/lib/core/native-date.module.ts","../../../../projects/datetime-picker/src/public-api.ts","../../../../projects/datetime-picker/src/angular-material-components-datetime-picker.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\n\r\n\r\nexport type NgxMatDateFormats = {\r\n    parse: {\r\n        dateInput: any\r\n    },\r\n    display: {\r\n        dateInput: any,\r\n        monthYearLabel: any,\r\n        dateA11yLabel: any,\r\n        monthYearA11yLabel: any,\r\n    }\r\n};\r\n\r\n\r\nexport const NGX_MAT_DATE_FORMATS = new InjectionToken<NgxMatDateFormats>('ngx-mat-date-formats');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {take} from 'rxjs/operators';\r\n\r\n/**\r\n * Extra CSS classes that can be associated with a calendar cell.\r\n */\r\nexport type NgxMatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class NgxMatCalendarCell<D = any> {\r\n  constructor(public value: number,\r\n              public displayValue: string,\r\n              public ariaLabel: string,\r\n              public enabled: boolean,\r\n              public cssClasses: NgxMatCalendarCellCssClasses = {},\r\n              public compareValue = value,\r\n              public rawValue?: D) {}\r\n}\r\n\r\n/** Event emitted when a date inside the calendar is triggered as a result of a user action. */\r\nexport interface NgxMatCalendarUserEvent<D> {\r\n  value: D;\r\n  event: Event;\r\n}\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: '[ngx-mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.scss'],\r\n  host: {\r\n    'class': 'ngx-mat-calendar-body',\r\n    'role': 'grid',\r\n    'aria-readonly': 'true'\r\n  },\r\n  exportAs: 'NgxMatCalendarBody',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendarBody implements OnChanges, OnDestroy {\r\n  /**\r\n   * Used to skip the next focus event when rendering the preview range.\r\n   * We need a flag like this, because some browsers fire focus events asynchronously.\r\n   */\r\n  private _skipNextFocus: boolean;\r\n\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: NgxMatCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** Start value of the selected date range. */\r\n  @Input() startValue: number;\r\n\r\n  /** End value of the selected date range. */\r\n  @Input() endValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols: number = 7;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell: number = 0;\r\n\r\n  /** Whether a range is being selected. */\r\n  @Input() isRange: boolean = false;\r\n\r\n  /**\r\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n   * maintained even as the table resizes.\r\n   */\r\n  @Input() cellAspectRatio: number = 1;\r\n\r\n  /** Start of the comparison range. */\r\n  @Input() comparisonStart: number | null;\r\n\r\n  /** End of the comparison range. */\r\n  @Input() comparisonEnd: number | null;\r\n\r\n  /** Start of the preview range. */\r\n  @Input() previewStart: number | null = null;\r\n\r\n  /** End of the preview range. */\r\n  @Input() previewEnd: number | null = null;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() readonly selectedValueChange: EventEmitter<NgxMatCalendarUserEvent<number>> =\r\n      new EventEmitter<NgxMatCalendarUserEvent<number>>();\r\n\r\n  /** Emits when the preview has changed as a result of a user action. */\r\n  @Output() previewChange = new EventEmitter<NgxMatCalendarUserEvent<NgxMatCalendarCell | null>>();\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  _firstRowOffset: number;\r\n\r\n  /** Padding for the individual date cells. */\r\n  _cellPadding: string;\r\n\r\n  /** Width of an individual cell. */\r\n  _cellWidth: string;\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) {\r\n    _ngZone.runOutsideAngular(() => {\r\n      const element = _elementRef.nativeElement;\r\n      element.addEventListener('mouseenter', this._enterHandler, true);\r\n      element.addEventListener('focus', this._enterHandler, true);\r\n      element.addEventListener('mouseleave', this._leaveHandler, true);\r\n      element.addEventListener('blur', this._leaveHandler, true);\r\n    });\r\n  }\r\n\r\n  /** Called when a cell is clicked. */\r\n  _cellClicked(cell: NgxMatCalendarCell, event: MouseEvent): void {\r\n    if (cell.enabled) {\r\n      this.selectedValueChange.emit({value: cell.value, event});\r\n    }\r\n  }\r\n\r\n  /** Returns whether a cell should be marked as selected. */\r\n  _isSelected(cell: NgxMatCalendarCell) {\r\n    return this.startValue === cell.compareValue || this.endValue === cell.compareValue;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const columnChanges = changes['numCols'];\r\n    const {rows, numCols} = this;\r\n\r\n    if (changes['rows'] || columnChanges) {\r\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\r\n    }\r\n\r\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\r\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\r\n    }\r\n\r\n    if (columnChanges || !this._cellWidth) {\r\n      this._cellWidth = `${100 / numCols}%`;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const element = this._elementRef.nativeElement;\r\n    element.removeEventListener('mouseenter', this._enterHandler, true);\r\n    element.removeEventListener('focus', this._enterHandler, true);\r\n    element.removeEventListener('mouseleave', this._leaveHandler, true);\r\n    element.removeEventListener('blur', this._leaveHandler, true);\r\n  }\r\n\r\n  /** Returns whether a cell is active. */\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell(movePreview = true) {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        const activeCell: HTMLElement | null =\r\n            this._elementRef.nativeElement.querySelector('.ngx-mat-calendar-body-active');\r\n\r\n        if (activeCell) {\r\n          if (!movePreview) {\r\n            this._skipNextFocus = true;\r\n          }\r\n\r\n          activeCell.focus();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Gets whether a value is the start of the main range. */\r\n  _isRangeStart(value: number) {\r\n    return isStart(value, this.startValue, this.endValue);\r\n  }\r\n\r\n  /** Gets whether a value is the end of the main range. */\r\n  _isRangeEnd(value: number) {\r\n    return isEnd(value, this.startValue, this.endValue);\r\n  }\r\n\r\n  /** Gets whether a value is within the currently-selected range. */\r\n  _isInRange(value: number): boolean {\r\n    return isInRange(value, this.startValue, this.endValue, this.isRange);\r\n  }\r\n\r\n  /** Gets whether a value is the start of the comparison range. */\r\n  _isComparisonStart(value: number) {\r\n    return isStart(value, this.comparisonStart, this.comparisonEnd);\r\n  }\r\n\r\n  /** Whether the cell is a start bridge cell between the main and comparison ranges. */\r\n  _isComparisonBridgeStart(value: number, rowIndex: number, colIndex: number) {\r\n    if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\r\n      return false;\r\n    }\r\n\r\n    let previousCell: NgxMatCalendarCell | undefined = this.rows[rowIndex][colIndex - 1];\r\n\r\n    if (!previousCell) {\r\n      const previousRow = this.rows[rowIndex - 1];\r\n      previousCell = previousRow && previousRow[previousRow.length - 1];\r\n    }\r\n\r\n    return previousCell && !this._isRangeEnd(previousCell.compareValue);\r\n  }\r\n\r\n  /** Whether the cell is an end bridge cell between the main and comparison ranges. */\r\n  _isComparisonBridgeEnd(value: number, rowIndex: number, colIndex: number) {\r\n    if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\r\n      return false;\r\n    }\r\n\r\n    let nextCell: NgxMatCalendarCell | undefined = this.rows[rowIndex][colIndex + 1];\r\n\r\n    if (!nextCell) {\r\n      const nextRow = this.rows[rowIndex + 1];\r\n      nextCell = nextRow && nextRow[0];\r\n    }\r\n\r\n    return nextCell && !this._isRangeStart(nextCell.compareValue);\r\n  }\r\n\r\n  /** Gets whether a value is the end of the comparison range. */\r\n  _isComparisonEnd(value: number) {\r\n    return isEnd(value, this.comparisonStart, this.comparisonEnd);\r\n  }\r\n\r\n  /** Gets whether a value is within the current comparison range. */\r\n  _isInComparisonRange(value: number) {\r\n    return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\r\n  }\r\n\r\n  /** Gets whether a value is the start of the preview range. */\r\n  _isPreviewStart(value: number) {\r\n    return isStart(value, this.previewStart, this.previewEnd);\r\n  }\r\n\r\n  /** Gets whether a value is the end of the preview range. */\r\n  _isPreviewEnd(value: number) {\r\n    return isEnd(value, this.previewStart, this.previewEnd);\r\n  }\r\n\r\n  /** Gets whether a value is inside the preview range. */\r\n  _isInPreview(value: number) {\r\n    return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\r\n  }\r\n\r\n  /**\r\n   * Event handler for when the user enters an element\r\n   * inside the calendar body (e.g. by hovering in or focus).\r\n   */\r\n  private _enterHandler = (event: Event) => {\r\n    if (this._skipNextFocus && event.type === 'focus') {\r\n      this._skipNextFocus = false;\r\n      return;\r\n    }\r\n\r\n    // We only need to hit the zone when we're selecting a range.\r\n    if (event.target && this.isRange) {\r\n      const cell = this._getCellFromElement(event.target as HTMLElement);\r\n\r\n      if (cell) {\r\n        this._ngZone.run(() => this.previewChange.emit({value: cell.enabled ? cell : null, event}));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event handler for when the user's pointer leaves an element\r\n   * inside the calendar body (e.g. by hovering out or blurring).\r\n   */\r\n  private _leaveHandler = (event: Event) => {\r\n    // We only need to hit the zone when we're selecting a range.\r\n    if (this.previewEnd !== null && this.isRange) {\r\n      // Only reset the preview end value when leaving cells. This looks better, because\r\n      // we have a gap between the cells and the rows and we don't want to remove the\r\n      // range just for it to show up again when the user moves a few pixels to the side.\r\n      if (event.target && isTableCell(event.target as HTMLElement)) {\r\n        this._ngZone.run(() => this.previewChange.emit({value: null, event}));\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Finds the NgxMatCalendarCell that corresponds to a DOM node. */\r\n  private _getCellFromElement(element: HTMLElement): NgxMatCalendarCell | null {\r\n    let cell: HTMLElement | undefined;\r\n\r\n    if (isTableCell(element)) {\r\n      cell = element;\r\n    } else if (isTableCell(element.parentNode!)) {\r\n      cell = element.parentNode as HTMLElement;\r\n    }\r\n\r\n    if (cell) {\r\n      const row = cell.getAttribute('data-ngx-mat-row');\r\n      const col = cell.getAttribute('data-ngx-mat-col');\r\n\r\n      if (row && col) {\r\n        return this.rows[parseInt(row)][parseInt(col)];\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n\r\n/** Checks whether a node is a table cell element. */\r\nfunction isTableCell(node: Node): node is HTMLTableCellElement {\r\n  return node.nodeName === 'TD';\r\n}\r\n\r\n/** Checks whether a value is the start of a range. */\r\nfunction isStart(value: number, start: number | null, end: number | null): boolean {\r\n  return end !== null && start !== end && value < end && value === start;\r\n}\r\n\r\n/** Checks whether a value is the end of a range. */\r\nfunction isEnd(value: number, start: number | null, end: number | null): boolean {\r\n  return start !== null && start !== end && value >= start && value === end;\r\n}\r\n\r\n/** Checks whether a value is inside of a range. */\r\nfunction isInRange(value: number,\r\n                   start: number | null,\r\n                   end: number | null,\r\n                   rangeEnabled: boolean): boolean {\r\n  return rangeEnabled && start !== null && end !== null && start !== end &&\r\n         value >= start && value <= end;\r\n}\r\n","<!--\r\n  If there's not enough space in the first row, create a separate label row. We mark this row as\r\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\r\n-->\r\n<tr *ngIf=\"_firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">\r\n  <td class=\"mat-calendar-body-label\"\r\n      [attr.colspan]=\"numCols\"\r\n      [style.paddingTop]=\"_cellPadding\"\r\n      [style.paddingBottom]=\"_cellPadding\">\r\n    {{label}}\r\n  </td>\r\n</tr>\r\n\r\n<!-- Create the first row separately so we can include a special spacer cell. -->\r\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\r\n  <!--\r\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\r\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\r\n    percentage of the width (a variant of the trick described here:\r\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\r\n  -->\r\n  <td *ngIf=\"rowIndex === 0 && _firstRowOffset\"\r\n      aria-hidden=\"true\"\r\n      class=\"mat-calendar-body-label\"\r\n      [attr.colspan]=\"_firstRowOffset\"\r\n      [style.paddingTop]=\"_cellPadding\"\r\n      [style.paddingBottom]=\"_cellPadding\">\r\n    {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\r\n  </td>\r\n  <td *ngFor=\"let item of row; let colIndex = index\"\r\n      role=\"gridcell\"\r\n      class=\"mat-calendar-body-cell\"\r\n      [ngClass]=\"item.cssClasses\"\r\n      [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\"\r\n      [attr.data-mat-row]=\"rowIndex\"\r\n      [attr.data-mat-col]=\"colIndex\"\r\n      [class.mat-calendar-body-disabled]=\"!item.enabled\"\r\n      [class.mat-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\r\n      [class.mat-calendar-body-range-start]=\"_isRangeStart(item.compareValue)\"\r\n      [class.mat-calendar-body-range-end]=\"_isRangeEnd(item.compareValue)\"\r\n      [class.mat-calendar-body-in-range]=\"_isInRange(item.compareValue)\"\r\n      [class.mat-calendar-body-comparison-bridge-start]=\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\"\r\n      [class.mat-calendar-body-comparison-bridge-end]=\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\"\r\n      [class.mat-calendar-body-comparison-start]=\"_isComparisonStart(item.compareValue)\"\r\n      [class.mat-calendar-body-comparison-end]=\"_isComparisonEnd(item.compareValue)\"\r\n      [class.mat-calendar-body-in-comparison-range]=\"_isInComparisonRange(item.compareValue)\"\r\n      [class.mat-calendar-body-preview-start]=\"_isPreviewStart(item.compareValue)\"\r\n      [class.mat-calendar-body-preview-end]=\"_isPreviewEnd(item.compareValue)\"\r\n      [class.mat-calendar-body-in-preview]=\"_isInPreview(item.compareValue)\"\r\n      [attr.aria-label]=\"item.ariaLabel\"\r\n      [attr.aria-disabled]=\"!item.enabled || null\"\r\n      [attr.aria-selected]=\"_isSelected(item)\"\r\n      (click)=\"_cellClicked(item, $event)\"\r\n      [style.width]=\"_cellWidth\"\r\n      [style.paddingTop]=\"_cellPadding\"\r\n      [style.paddingBottom]=\"_cellPadding\">\r\n      <div class=\"mat-calendar-body-cell-content mat-focus-indicator\"\r\n        [class.mat-calendar-body-selected]=\"_isSelected(item)\"\r\n        [class.mat-calendar-body-today]=\"todayValue === item.compareValue\">\r\n        {{item.displayValue}}\r\n      </div>\r\n      <div class=\"mat-calendar-body-cell-preview\"></div>\r\n  </td>\r\n</tr>\r\n","import { DateAdapter } from '@angular/material/core';\r\n\r\nexport abstract class NgxMatDateAdapter<D> extends DateAdapter<D> {\r\n  /**\r\n * Gets the hour component of the given date.\r\n * @param date The date to extract the month from.\r\n * @returns The hour component.\r\n */\r\n  abstract getHour(date: D): number;\r\n\r\n  /**\r\n* Gets the minute component of the given date.\r\n* @param date The date to extract the month from.\r\n* @returns The minute component.\r\n*/\r\n  abstract getMinute(date: D): number;\r\n\r\n  /**\r\n  * Gets the second component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @returns The second component.\r\n  */\r\n  abstract getSecond(date: D): number;\r\n\r\n  /**\r\n  * Set the hour component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @param value The value to set.\r\n  */\r\n  abstract setHour(date: D, value: number): void;\r\n\r\n  /**\r\n  * Set the second component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @param value The value to set.\r\n  */\r\n  abstract setMinute(date: D, value: number): void;\r\n\r\n  /**\r\n   * Set the second component of the given date.\r\n   * @param date The date to extract the month from.\r\n   * @param value The value to set.\r\n   */\r\n  abstract setSecond(date: D, value: number): void;\r\n\r\n  /**\r\n   * Check if two date have same time\r\n   * @param a Date 1\r\n   * @param b Date 2\r\n   */\r\n  isSameTime(a: D, b: D): boolean {\r\n    if (a == null || b == null) return true;\r\n    return this.getHour(a) === this.getHour(b)\r\n      && this.getMinute(a) === this.getMinute(b)\r\n      && this.getSecond(a) === this.getSecond(b);\r\n  }\r\n\r\n  /**\r\n   * Copy time from a date to a another date\r\n   * @param toDate \r\n   * @param fromDate \r\n   */\r\n  copyTime(toDate: D, fromDate: D) {\r\n    this.setHour(toDate, this.getHour(fromDate));\r\n    this.setMinute(toDate, this.getMinute(fromDate));\r\n    this.setSecond(toDate, this.getSecond(fromDate));\r\n  }\r\n\r\n  /**\r\n * Compares two dates.\r\n * @param first The first date to compare.\r\n * @param second The second date to compare.\r\n * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n *     a number greater than 0 if the first date is later.\r\n */\r\n  compareDateWithTime(first: D, second: D, showSeconds?: boolean): number {\r\n    let res = super.compareDate(first, second) ||\r\n      this.getHour(first) - this.getHour(second) ||\r\n      this.getMinute(first) - this.getMinute(second);\r\n    if (showSeconds) {\r\n      res = res || this.getSecond(first) - this.getSecond(second);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Set time by using default values\r\n   * @param defaultTime List default values [hour, minute, second]\r\n   */\r\n  setTimeByDefaultValues(date: D, defaultTime: number[]) {\r\n    if (!Array.isArray(defaultTime)) {\r\n      throw Error('@Input DefaultTime should be an array');\r\n    }\r\n    this.setHour(date, defaultTime[0] || 0);\r\n    this.setMinute(date, defaultTime[1] || 0);\r\n    this.setSecond(date, defaultTime[2] || 0);\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, InjectionToken} from '@angular/core';\r\nimport { DateRange } from '@angular/material/datepicker';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\n\r\n/** Injection token used to customize the date range selection behavior. */\r\nexport const NGX_MAT_DATE_RANGE_SELECTION_STRATEGY =\r\n    new InjectionToken<NgxMatDateRangeSelectionStrategy<any>>('NGX_MAT_DATE_RANGE_SELECTION_STRATEGY');\r\n\r\n/** Object that can be provided in order to customize the date range selection behavior. */\r\nexport interface NgxMatDateRangeSelectionStrategy<D> {\r\n  /**\r\n   * Called when the user has finished selecting a value.\r\n   * @param date Date that was selected. Will be null if the user cleared the selection.\r\n   * @param currentRange Range that is currently show in the calendar.\r\n   * @param event DOM event that triggered the selection. Currently only corresponds to a `click`\r\n   *    event, but it may get expanded in the future.\r\n   */\r\n  selectionFinished(date: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\r\n\r\n  /**\r\n   * Called when the user has activated a new date (e.g. by hovering over\r\n   * it or moving focus) and the calendar tries to display a date range.\r\n   *\r\n   * @param activeDate Date that the user has activated. Will be null if the user moved\r\n   *    focus to an element that's no a calendar cell.\r\n   * @param currentRange Range that is currently shown in the calendar.\r\n   * @param event DOM event that caused the preview to be changed. Will be either a\r\n   *    `mouseenter`/`mouseleave` or `focus`/`blur` depending on how the user is navigating.\r\n   */\r\n  createPreview(activeDate: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\r\n}\r\n\r\n/** Provides the default date range selection behavior. */\r\n@Injectable()\r\nexport class DefaultNgxMatCalendarRangeStrategy<D> implements NgxMatDateRangeSelectionStrategy<D> {\r\n  constructor(private _dateAdapter: NgxMatDateAdapter<D>) {}\r\n\r\n  selectionFinished(date: D, currentRange: DateRange<D>) {\r\n    let {start, end} = currentRange;\r\n\r\n    if (start == null) {\r\n      start = date;\r\n    } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\r\n      end = date;\r\n    } else {\r\n      start = date;\r\n      end = null;\r\n    }\r\n\r\n    return new DateRange<D>(start, end);\r\n  }\r\n\r\n  createPreview(activeDate: D | null, currentRange: DateRange<D>) {\r\n    let start: D | null = null;\r\n    let end: D | null = null;\r\n\r\n    if (currentRange.start && !currentRange.end && activeDate) {\r\n      start = currentRange.start;\r\n      end = activeDate;\r\n    }\r\n\r\n    return new DateRange<D>(start, end);\r\n  }\r\n}\r\n","export const LIMIT_TIMES = {\r\n    minHour: 0,\r\n    maxHour: 24,\r\n    minMinute: 0,\r\n    maxMinute: 60,\r\n    minSecond: 0,\r\n    maxSecond: 60,\r\n    meridian: 12\r\n}\r\n\r\nexport const MERIDIANS = {\r\n    AM: 'AM',\r\n    PM: 'PM'\r\n}\r\n\r\nexport const DEFAULT_STEP = 1;\r\nexport const NUMERIC_REGEX = /[^0-9]/g;\r\n\r\nexport const PATTERN_INPUT_HOUR = /^(2[0-3]|[0-1][0-9]|[0-9])$/;\r\nexport const PATTERN_INPUT_MINUTE = /^([0-5][0-9]|[0-9])$/;\r\nexport const PATTERN_INPUT_SECOND = /^([0-5][0-9]|[0-9])$/;\r\n\r\nexport function formatTwoDigitTimeValue(val: number) {\r\n    const txt = val.toString();\r\n    return txt.length > 1 ? txt : `0${txt}`;\r\n}\r\n\r\nexport function createMissingDateImplError(provider: string) {\r\n    return Error(\r\n        `NgxMatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n        `modules at your application root: NgxMatNativeDateModule, NgxMatMomentModule, or provide a ` +\r\n        `custom implementation.`);\r\n}\r\n\r\n/** Formats a range of years. */\r\nexport function formatYearRange(start: string, end: string): string {\r\n    return `${start} \\u2013 ${end}`;\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n  ESCAPE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ViewChild,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\n\r\nimport {Subscription} from 'rxjs';\r\nimport {startWith} from 'rxjs/operators';\r\nimport { DateRange } from '@angular/material/datepicker';\r\nimport { NgxMatCalendarCellCssClasses, NgxMatCalendarUserEvent, NgxMatCalendarBody, NgxMatCalendarCell } from './calendar-body';\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateFormats } from './core/date-formats';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NGX_MAT_DATE_RANGE_SELECTION_STRATEGY, NgxMatDateRangeSelectionStrategy } from './date-range-selection-strategy';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\n\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-month-view',\r\n  templateUrl: 'month-view.html',\r\n  exportAs: 'ngxMatMonthView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatMonthView<D> implements AfterContentInit, OnDestroy {\r\n  private _rerenderSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): DateRange<D> | D | null { return this._selected; }\r\n  set selected(value: DateRange<D> | D | null) {\r\n    if (value instanceof DateRange) {\r\n      this._selected = value;\r\n    } else {\r\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n\r\n    this._setRanges(this._selected);\r\n  }\r\n  private _selected: DateRange<D> | D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => NgxMatCalendarCellCssClasses;\r\n\r\n  /** Start of the comparison range. */\r\n  @Input() comparisonStart: D | null;\r\n\r\n  /** End of the comparison range. */\r\n  @Input() comparisonEnd: D | null;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<NgxMatCalendarUserEvent<D | null>> =\r\n      new EventEmitter<NgxMatCalendarUserEvent<D | null>>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(NgxMatCalendarBody) _matCalendarBody: NgxMatCalendarBody;\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: NgxMatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /** Start value of the currently-shown date range. */\r\n  _rangeStart: number | null;\r\n\r\n  /** End value of the currently-shown date range. */\r\n  _rangeEnd: number | null;\r\n\r\n  /** Start value of the currently-shown comparison date range. */\r\n  _comparisonRangeStart: number | null;\r\n\r\n  /** End value of the currently-shown comparison date range. */\r\n  _comparisonRangeEnd: number | null;\r\n\r\n  /** Start of the preview range. */\r\n  _previewStart: number | null;\r\n\r\n  /** End of the preview range. */\r\n  _previewEnd: number | null;\r\n\r\n  /** Whether the user is currently selecting a range of dates. */\r\n  _isRange: boolean;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: {long: string, narrow: string}[];\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n              @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n              @Optional() private _dir?: Directionality,\r\n              @Inject(NGX_MAT_DATE_RANGE_SELECTION_STRATEGY) @Optional()\r\n                  private _rangeStrategy?: NgxMatDateRangeSelectionStrategy<D>) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._rerenderSubscription = this._dateAdapter.localeChanges\r\n      .pipe(startWith(null))\r\n      .subscribe(() => this._init());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(event: NgxMatCalendarUserEvent<number>) {\r\n    const date = event.value;\r\n    const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n    const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n    let rangeStartDate: number | null;\r\n    let rangeEndDate: number | null;\r\n\r\n    if (this._selected instanceof DateRange) {\r\n      rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\r\n      rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\r\n    } else {\r\n      rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\r\n    }\r\n\r\n    if (rangeStartDate !== date || rangeEndDate !== date) {\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit({value: selectedDate, event: event.event});\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n              this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n          this._dateSelected({value: this._dateAdapter.getDate(this._activeDate), event});\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      case ESCAPE:\r\n        // Abort the current range selection if the user presses escape mid-selection.\r\n        if (this._previewEnd != null) {\r\n          this._previewStart = this._previewEnd = null;\r\n          this.selectedChange.emit(null);\r\n          this._userSelection.emit({value: null, event});\r\n          event.preventDefault();\r\n          event.stopPropagation(); // Prevents the overlay from closing.\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._setRanges(this.selected);\r\n    this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\r\n    this._monthLabel =\r\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n            .toLocaleUpperCase();\r\n\r\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._initWeekdays();\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell(movePreview?: boolean) {\r\n    this._matCalendarBody._focusActiveCell(movePreview);\r\n  }\r\n\r\n  /** Called when the user has activated a new cell and the preview needs to be updated. */\r\n  _previewChanged({event, value: cell}: NgxMatCalendarUserEvent<NgxMatCalendarCell<D> | null>) {\r\n    if (this._rangeStrategy) {\r\n      // We can assume that this will be a range, because preview\r\n      // events aren't fired for single date selections.\r\n      const value = cell ? cell.rawValue! : null;\r\n      const previewRange =\r\n          this._rangeStrategy.createPreview(value, this.selected as DateRange<D>, event);\r\n      this._previewStart = this._getCellCompareValue(previewRange.start);\r\n      this._previewEnd = this._getCellCompareValue(previewRange.end);\r\n\r\n      // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\r\n      // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\r\n      // when navigating one month back using the keyboard which will cause this handler\r\n      // to throw a \"changed after checked\" error when updating the preview state.\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /** Initializes the weekdays. */\r\n  private _initWeekdays() {\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n        return {long, narrow: narrowWeekdays[i]};\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n            this._dateAdapter.getYear(this.activeDate),\r\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\r\n\r\n      this._weeks[this._weeks.length - 1].push(new NgxMatCalendarCell<D>(i + 1, dateNames[i],\r\n          ariaLabel, enabled, cellClasses, this._getCellCompareValue(date)!, date));\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return !!date &&\r\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\r\n        (!this.dateFilter || this.dateFilter(date));\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n        this._dateAdapter.getDate(date) : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\n\r\n  /** Gets the value that will be used to one cell to another. */\r\n  private _getCellCompareValue(date: D | null): number | null {\r\n    if (date) {\r\n      // We use the time since the Unix epoch to compare dates in this view, rather than the\r\n      // cell values, because we need to support ranges that span across multiple months/years.\r\n      const year = this._dateAdapter.getYear(date);\r\n      const month = this._dateAdapter.getMonth(date);\r\n      const day = this._dateAdapter.getDate(date);\r\n      return new Date(year, month, day).getTime();\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n\r\n  /** Sets the current range based on a model value. */\r\n  private _setRanges(selectedValue: DateRange<D> | D | null) {\r\n    if (selectedValue instanceof DateRange) {\r\n      this._rangeStart = this._getCellCompareValue(selectedValue.start);\r\n      this._rangeEnd = this._getCellCompareValue(selectedValue.end);\r\n      this._isRange = true;\r\n    } else {\r\n      this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\r\n      this._isRange = false;\r\n    }\r\n\r\n    this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\r\n    this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\r\n  }\r\n}\r\n","<table class=\"mat-calendar-table\" role=\"presentation\">\r\n  <thead class=\"mat-calendar-table-header\">\r\n    <tr>\r\n      <th scope=\"col\" *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th>\r\n    </tr>\r\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"7\" aria-hidden=\"true\"></th></tr>\r\n  </thead>\r\n  <tbody ngx-mat-calendar-body\r\n         [label]=\"_monthLabel\"\r\n         [rows]=\"_weeks\"\r\n         [todayValue]=\"_todayDate!\"\r\n         [startValue]=\"_rangeStart!\"\r\n         [endValue]=\"_rangeEnd!\"\r\n         [comparisonStart]=\"_comparisonRangeStart\"\r\n         [comparisonEnd]=\"_comparisonRangeEnd\"\r\n         [previewStart]=\"_previewStart\"\r\n         [previewEnd]=\"_previewEnd\"\r\n         [isRange]=\"_isRange\"\r\n         [labelMinRequiredCells]=\"3\"\r\n         [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\r\n         (selectedValueChange)=\"_dateSelected($event)\"\r\n         (previewChange)=\"_previewChanged($event)\"\r\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\r\n  </tbody>\r\n</table>\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {Subscription} from 'rxjs';\r\nimport {startWith} from 'rxjs/operators';\r\nimport { DateRange } from '@angular/material/datepicker';\r\nimport { NgxMatCalendarCell, NgxMatCalendarBody, NgxMatCalendarUserEvent } from './calendar-body';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\nexport const yearsPerPage = 24;\r\n\r\nexport const yearsPerRow = 4;\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-multi-year-view',\r\n  templateUrl: 'multi-year-view.html',\r\n  exportAs: 'ngxMatMultiYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatMultiYearView<D> implements AfterContentInit, OnDestroy {\r\n  private _rerenderSubscription = Subscription.EMPTY;\r\n\r\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (!isSameMultiYearView(\r\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): DateRange<D> | D | null { return this._selected; }\r\n  set selected(value: DateRange<D> | D | null) {\r\n    if (value instanceof DateRange) {\r\n      this._selected = value;\r\n    } else {\r\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n\r\n    this._setSelectedYear(value);\r\n  }\r\n  private _selected: DateRange<D> | D | null;\r\n\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new year is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected year. This doesn't imply a change on the selected date */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(NgxMatCalendarBody) _matCalendarBody: NgxMatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the currently displayed years. */\r\n  _years: NgxMatCalendarCell[][];\r\n\r\n  /** The year that today falls on. */\r\n  _todayYear: number;\r\n\r\n  /** The year of the selected date. Null if the selected date is null. */\r\n  _selectedYear: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n              @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._rerenderSubscription = this._dateAdapter.localeChanges\r\n      .pipe(startWith(null))\r\n      .subscribe(() => this._init());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Initializes this multi-year view. */\r\n  _init() {\r\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\r\n\r\n    // We want a range years such that we maximize the number of\r\n    // enabled dates visible at once. This prevents issues where the minimum year\r\n    // is the last item of a page OR the maximum year is the first item of a page.\r\n\r\n    // The offset from the active year to the \"slot\" for the starting year is the\r\n    // *actual* first rendered year in the multi-year view.\r\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    const minYearOfPage = activeYear - getActiveOffset(\r\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n\r\n    this._years = [];\r\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\r\n      row.push(minYearOfPage + i);\r\n      if (row.length == yearsPerRow) {\r\n        this._years.push(row.map(year => this._createCellForYear(year)));\r\n        row = [];\r\n      }\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Handles when a new year is selected. */\r\n  _yearSelected(event: NgxMatCalendarUserEvent<number>) {\r\n    const year = event.value;\r\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\r\n    let month = this._dateAdapter.getMonth(this.activeDate);\r\n    let daysInMonth =\r\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n          yearsPerPage - getActiveOffset(\r\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._yearSelected({value: this._dateAdapter.getYear(this._activeDate), event});\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  _getActiveCell(): number {\r\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given year. */\r\n  private _createCellForYear(year: number) {\r\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\r\n    return new NgxMatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\r\n  }\r\n\r\n  /** Whether the given year is enabled. */\r\n  private _shouldEnableYear(year: number) {\r\n    // disable if the year is greater than maxDate lower than minDate\r\n    if (year === undefined || year === null ||\r\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\r\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\r\n      return false;\r\n    }\r\n\r\n    // enable if it reaches here and there's no filter defined\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\r\n\r\n    // If any date in the year is enabled count the year as enabled.\r\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n\r\n  /** Sets the currently-highlighted year based on a model value. */\r\n  private _setSelectedYear(value: DateRange<D> | D | null) {\r\n    this._selectedYear = null;\r\n\r\n    if (value instanceof DateRange) {\r\n      const displayValue = value.start || value.end;\r\n\r\n      if (displayValue) {\r\n        this._selectedYear = this._dateAdapter.getYear(displayValue);\r\n      }\r\n    } else if (value) {\r\n      this._selectedYear = this._dateAdapter.getYear(value);\r\n    }\r\n  }\r\n}\r\n\r\nexport function isSameMultiYearView<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\r\n  const year1 = dateAdapter.getYear(date1);\r\n  const year2 = dateAdapter.getYear(date2);\r\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\r\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\r\n          Math.floor((year2 - startingYear) / yearsPerPage);\r\n}\r\n\r\n/**\r\n * When the multi-year view is first opened, the active year will be in view.\r\n * So we compute how many years are between the active year and the *slot* where our\r\n * \"startingYear\" will render when paged into view.\r\n */\r\nexport function getActiveOffset<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\r\n  const activeYear = dateAdapter.getYear(activeDate);\r\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\r\n    yearsPerPage);\r\n}\r\n\r\n/**\r\n * We pick a \"starting\" year such that either the maximum year would be at the end\r\n * or the minimum year would be at the beginning of a page.\r\n */\r\nfunction getStartingYear<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, minDate: D | null, maxDate: D | null): number {\r\n  let startingYear = 0;\r\n  if (maxDate) {\r\n    const maxYear = dateAdapter.getYear(maxDate);\r\n    startingYear = maxYear - yearsPerPage + 1;\r\n  } else if (minDate) {\r\n    startingYear = dateAdapter.getYear(minDate);\r\n  }\r\n  return startingYear;\r\n}\r\n\r\n/** Gets remainder that is non-negative, even if first number is negative */\r\nfunction euclideanModulo (a: number, b: number): number {\r\n  return (a % b + b) % b;\r\n}\r\n","<table class=\"mat-calendar-table\" role=\"presentation\">\r\n  <thead class=\"mat-calendar-table-header\">\r\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr>\r\n  </thead>\r\n  <tbody ngx-mat-calendar-body\r\n         [rows]=\"_years\"\r\n         [todayValue]=\"_todayYear\"\r\n         [startValue]=\"_selectedYear!\"\r\n         [endValue]=\"_selectedYear!\"\r\n         [numCols]=\"4\"\r\n         [cellAspectRatio]=\"4 / 7\"\r\n         [activeCell]=\"_getActiveCell()\"\r\n         (selectedValueChange)=\"_yearSelected($event)\"\r\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\r\n  </tbody>\r\n</table>\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { Subscription } from 'rxjs';\r\nimport { startWith } from 'rxjs/operators';\r\nimport { DateRange } from '@angular/material/datepicker';\r\nimport { NgxMatCalendarBody, NgxMatCalendarCell, NgxMatCalendarUserEvent } from './calendar-body';\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateFormats } from './core/date-formats';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  exportAs: 'ngxMatYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatYearView<D> implements AfterContentInit, OnDestroy {\r\n  private _rerenderSubscription = Subscription.EMPTY;\r\n\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): DateRange<D> | D | null { return this._selected; }\r\n  set selected(value: DateRange<D> | D | null) {\r\n    if (value instanceof DateRange) {\r\n      this._selected = value;\r\n    } else {\r\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n\r\n    this._setSelectedMonth(value);\r\n  }\r\n  private _selected: DateRange<D> | D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected month. This doesn't imply a change on the selected date */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(NgxMatCalendarBody) _matCalendarBody: NgxMatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: NgxMatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._rerenderSubscription = this._dateAdapter.localeChanges\r\n      .pipe(startWith(null))\r\n      .subscribe(() => this._init());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(event: NgxMatCalendarUserEvent<number>) {\r\n    const month = event.value;\r\n    const normalizedDate =\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\r\n\r\n    this.monthSelected.emit(normalizedDate);\r\n\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\r\n\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate), month,\r\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n          -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n          11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._monthSelected({ value: this._dateAdapter.getMonth(this._activeDate), event });\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._setSelectedMonth(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n      month => this._createCellForMonth(month, monthNames[month])));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n      this._dateAdapter.getMonth(date) : null;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._dateAdapter.format(\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n      this._dateFormats.display.monthYearA11yLabel);\r\n    return new NgxMatCalendarCell(\r\n      month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (month === undefined || month === null ||\r\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n      this._isYearAndMonthBeforeMinDate(activeYear, month)) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n\r\n  /** Sets the currently-selected month based on a model value. */\r\n  private _setSelectedMonth(value: DateRange<D> | D | null) {\r\n    if (value instanceof DateRange) {\r\n      this._selectedMonth = this._getMonthInCurrentYear(value.start) ||\r\n        this._getMonthInCurrentYear(value.end);\r\n    } else {\r\n      this._selectedMonth = this._getMonthInCurrentYear(value);\r\n    }\r\n  }\r\n}\r\n","<table class=\"mat-calendar-table\" role=\"presentation\">\r\n  <thead class=\"mat-calendar-table-header\">\r\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr>\r\n  </thead>\r\n  <tbody ngx-mat-calendar-body\r\n         [label]=\"_yearLabel\"\r\n         [rows]=\"_months\"\r\n         [todayValue]=\"_todayMonth!\"\r\n         [startValue]=\"_selectedMonth!\"\r\n         [endValue]=\"_selectedMonth!\"\r\n         [labelMinRequiredCells]=\"2\"\r\n         [numCols]=\"4\"\r\n         [cellAspectRatio]=\"4 / 7\"\r\n         [activeCell]=\"_dateAdapter.getMonth(activeDate)\"\r\n         (selectedValueChange)=\"_monthSelected($event)\"\r\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\r\n  </tbody>\r\n</table>\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { ComponentPortal, ComponentType, Portal } from '@angular/cdk/portal';\r\nimport { AfterContentInit, AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatCalendarCellCssClasses, MatDatepickerIntl } from '@angular/material/datepicker';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDateFormats, NGX_MAT_DATE_FORMATS } from './core/date-formats';\r\nimport { NgxMatMonthView } from './month-view';\r\nimport { getActiveOffset, isSameMultiYearView, NgxMatMultiYearView, yearsPerPage } from './multi-year-view';\r\nimport { createMissingDateImplError, formatYearRange } from './utils/date-utils';\r\nimport { NgxMatYearView } from './year-view';\r\n\r\n/**\r\n * Possible views for the calendar.\r\n * @docs-private\r\n */\r\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\r\n\r\n/** Default header for NgxMatCalendar */\r\n@Component({\r\n  selector: 'ngx-mat-calendar-header',\r\n  templateUrl: 'calendar-header.html',\r\n  exportAs: 'ngxMatCalendarHeader',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendarHeader<D> {\r\n  constructor(private _intl: MatDatepickerIntl,\r\n    @Inject(forwardRef(() => NgxMatCalendar)) public calendar: NgxMatCalendar<D>,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  /** The label for the current calendar view. */\r\n  get periodButtonText(): string {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter\r\n        .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\r\n        .toLocaleUpperCase();\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\r\n    }\r\n\r\n    // The offset from the active year to the \"slot\" for the starting year is the\r\n    // *actual* first rendered year in the multi-year view, and the last year is\r\n    // just yearsPerPage - 1 away.\r\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\r\n    const minYearOfPage = activeYear - getActiveOffset(\r\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\r\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\r\n    const minYearName =\r\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\r\n    const maxYearName =\r\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\r\n    return formatYearRange(minYearName, maxYearName);\r\n  }\r\n\r\n  get periodButtonLabel(): string {\r\n    return this.calendar.currentView == 'month' ?\r\n      this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\r\n\r\n  /** The label for the previous button. */\r\n  get prevButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.prevMonthLabel,\r\n      'year': this._intl.prevYearLabel,\r\n      'multi-year': this._intl.prevMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** The label for the next button. */\r\n  get nextButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.nextMonthLabel,\r\n      'year': this._intl.nextYearLabel,\r\n      'multi-year': this._intl.nextMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  currentPeriodClicked(): void {\r\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  previousClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n      this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\r\n      this._dateAdapter.addCalendarYears(\r\n        this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\r\n      );\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  nextClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n      this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\r\n      this._dateAdapter.addCalendarYears(\r\n        this.calendar.activeDate,\r\n        this.calendar.currentView == 'year' ? 1 : yearsPerPage\r\n      );\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  previousEnabled(): boolean {\r\n    if (!this.calendar.minDate) {\r\n      return true;\r\n    }\r\n    return !this.calendar.minDate ||\r\n      !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  nextEnabled(): boolean {\r\n    return !this.calendar.maxDate ||\r\n      !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n    }\r\n    // Otherwise we are in 'multi-year' view.\r\n    return isSameMultiYearView(\r\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\r\n  }\r\n}\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.scss'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  exportAs: 'ngxMatCalendar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\r\n  /** An input indicating the type of the header component, if set. */\r\n  @Input() headerComponent: ComponentType<any>;\r\n\r\n  /** A portal containing the header component type for this calendar. */\r\n  _calendarHeaderPortal: Portal<any>;\r\n\r\n  private _intlChanges: Subscription;\r\n\r\n  /**\r\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n   * We need to schedule it, rather than do it immediately, because we have to wait\r\n   * for Angular to re-evaluate the view children.\r\n   */\r\n  private _moveFocusOnNextTick = false;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null { return this._startAt; }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** Whether the calendar should be started in month or year view. */\r\n  @Input() startView: MatCalendarView = 'month';\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the year chosen in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the month chosen in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(NgxMatMonthView) monthView: NgxMatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(NgxMatYearView) yearView: NgxMatYearView<D>;\r\n\r\n  /** Reference to the current multi-year view component. */\r\n  @ViewChild(NgxMatMultiYearView) multiYearView: NgxMatMultiYearView<D>;\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get activeDate(): D { return this._clampedActiveDate; }\r\n  set activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n    this.stateChanges.next();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  get currentView(): MatCalendarView { return this._currentView; }\r\n  set currentView(value: MatCalendarView) {\r\n    this._currentView = value;\r\n    this._moveFocusOnNextTick = true;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _currentView: MatCalendarView;\r\n\r\n  /**\r\n   * Emits whenever there is a state change that the header may need to respond to.\r\n   */\r\n  stateChanges = new Subject<void>();\r\n\r\n  constructor(_intl: MatDatepickerIntl,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    private _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxDateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => {\r\n      _changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || NgxMatCalendarHeader);\r\n    this.activeDate = this.startAt || this._dateAdapter.today();\r\n\r\n    // Assign to the private property since we don't want to move focus on init.\r\n    this._currentView = this.startView;\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this._moveFocusOnNextTick) {\r\n      this._moveFocusOnNextTick = false;\r\n      this.focusActiveCell();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const change =\r\n      changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this._getCurrentViewComponent();\r\n\r\n      if (view) {\r\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\r\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\r\n        this._changeDetectorRef.detectChanges();\r\n        view._init();\r\n      }\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  focusActiveCell() {\r\n    this._getCurrentViewComponent()._focusActiveCell();\r\n  }\r\n\r\n  /** Updates today's date after an update of the active date */\r\n  updateTodaysDate() {\r\n    let view = this.currentView == 'month' ? this.monthView :\r\n      (this.currentView == 'year' ? this.yearView : this.multiYearView);\r\n\r\n    view.ngAfterContentInit();\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D | null): void {\r\n    if (date && !this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\r\n\r\n  /** Handles year selection in the multiyear view. */\r\n  _yearSelectedInMultiYearView(normalizedYear: D) {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Handles month selection in the year view. */\r\n  _monthSelectedInYearView(normalizedMonth: D) {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  _userSelected(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles year/month selection in the multi-year/year views. */\r\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\r\n    this.activeDate = date;\r\n    this.currentView = view;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Returns the component instance that corresponds to the current calendar view. */\r\n  private _getCurrentViewComponent() {\r\n    return this.monthView || this.yearView || this.multiYearView;\r\n  }\r\n}\r\n","<div class=\"mat-calendar-header\">\r\n  <div class=\"mat-calendar-controls\">\r\n    <button mat-button type=\"button\" class=\"mat-calendar-period-button\"\r\n            (click)=\"currentPeriodClicked()\" [attr.aria-label]=\"periodButtonLabel\"\r\n            cdkAriaLive=\"polite\">\r\n      {{periodButtonText}}\r\n      <div class=\"mat-calendar-arrow\"\r\n           [class.mat-calendar-invert]=\"calendar.currentView != 'month'\"></div>\r\n    </button>\r\n\r\n    <div class=\"mat-calendar-spacer\"></div>\r\n\r\n    <ng-content></ng-content>\r\n\r\n    <button mat-icon-button type=\"button\" class=\"mat-calendar-previous-button\"\r\n            [disabled]=\"!previousEnabled()\" (click)=\"previousClicked()\"\r\n            [attr.aria-label]=\"prevButtonLabel\">\r\n    </button>\r\n\r\n    <button mat-icon-button type=\"button\" class=\"mat-calendar-next-button\"\r\n            [disabled]=\"!nextEnabled()\" (click)=\"nextClicked()\"\r\n            [attr.aria-label]=\"nextButtonLabel\">\r\n    </button>\r\n  </div>\r\n</div>\r\n","\r\n<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\"></ng-template>\r\n\r\n<div class=\"mat-calendar-content\" [ngSwitch]=\"currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\r\n  <ngx-mat-month-view\r\n      *ngSwitchCase=\"'month'\"\r\n      [(activeDate)]=\"activeDate\"\r\n      [selected]=\"selected\"\r\n      [dateFilter]=\"dateFilter\"\r\n      [maxDate]=\"maxDate\"\r\n      [minDate]=\"minDate\"\r\n      [dateClass]=\"dateClass\"\r\n      (selectedChange)=\"_dateSelected($event)\"\r\n      (_userSelection)=\"_userSelected()\">\r\n  </ngx-mat-month-view>\r\n\r\n  <ngx-mat-year-view\r\n      *ngSwitchCase=\"'year'\"\r\n      [(activeDate)]=\"activeDate\"\r\n      [selected]=\"selected\"\r\n      [dateFilter]=\"dateFilter\"\r\n      [maxDate]=\"maxDate\"\r\n      [minDate]=\"minDate\"\r\n      (monthSelected)=\"_monthSelectedInYearView($event)\"\r\n      (selectedChange)=\"_goToDateInView($event, 'month')\">\r\n  </ngx-mat-year-view>\r\n\r\n  <ngx-mat-multi-year-view\r\n      *ngSwitchCase=\"'multi-year'\"\r\n      [(activeDate)]=\"activeDate\"\r\n      [selected]=\"selected\"\r\n      [dateFilter]=\"dateFilter\"\r\n      [maxDate]=\"maxDate\"\r\n      [minDate]=\"minDate\"\r\n      (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\r\n      (selectedChange)=\"_goToDateInView($event, 'year')\">\r\n  </ngx-mat-multi-year-view>\r\n</div>\r\n","import { ChangeDetectorRef, Component, forwardRef, Input, OnChanges, OnInit, Optional, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { createMissingDateImplError, DEFAULT_STEP, formatTwoDigitTimeValue, LIMIT_TIMES, MERIDIANS, NUMERIC_REGEX, PATTERN_INPUT_HOUR, PATTERN_INPUT_MINUTE, PATTERN_INPUT_SECOND } from './utils/date-utils';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-timepicker',\r\n  templateUrl: './timepicker.component.html',\r\n  styleUrls: ['./timepicker.component.scss'],\r\n  host: {\r\n    'class': 'ngx-mat-timepicker'\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NgxMatTimepickerComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  exportAs: 'ngxMatTimepicker',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NgxMatTimepickerComponent<D> implements ControlValueAccessor, OnInit, OnChanges {\r\n\r\n  public form: FormGroup;\r\n\r\n  @Input() disabled = false;\r\n  @Input() showSpinners = true;\r\n  @Input() stepHour: number = DEFAULT_STEP;\r\n  @Input() stepMinute: number = DEFAULT_STEP;\r\n  @Input() stepSecond: number = DEFAULT_STEP;\r\n  @Input() showSeconds = false;\r\n  @Input() disableMinute = false;\r\n  @Input() enableMeridian = false;\r\n  @Input() defaultTime: number[];\r\n  @Input() color: ThemePalette = 'primary';\r\n\r\n  public meridian: string = MERIDIANS.AM;\r\n\r\n  /** Hour */\r\n  private get hour() {\r\n    let val = Number(this.form.controls['hour'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  private get minute() {\r\n    let val = Number(this.form.controls['minute'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  private get second() {\r\n    let val = Number(this.form.controls['second'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  /** Whether or not the form is valid */\r\n  public get valid(): boolean {\r\n    return this.form.valid;\r\n  }\r\n\r\n  private _onChange: any = () => { };\r\n  private _onTouched: any = () => { };\r\n  private _disabled: boolean;\r\n  private _model: D;\r\n\r\n  private _destroyed: Subject<void> = new Subject<void>();\r\n\r\n  public pattern = PATTERN_INPUT_HOUR;\r\n\r\n  constructor(@Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    private cd: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    this.form = this.formBuilder.group(\r\n      {\r\n        hour: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_HOUR)]],\r\n        minute: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_MINUTE)]],\r\n        second: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_SECOND)]]\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form.valueChanges.pipe(takeUntil(this._destroyed), debounceTime(400)).subscribe(val => {\r\n      this._updateModel();\r\n    })\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.disabled || changes.disableMinute) {\r\n      this._setDisableStates();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /**\r\n   * Writes a new value to the element.\r\n   * @param obj\r\n   */\r\n  writeValue(val: D): void {\r\n    if (val != null) {\r\n      this._model = val;\r\n    } else {\r\n      this._model = this._dateAdapter.today();\r\n      if (this.defaultTime != null) {\r\n        this._dateAdapter.setTimeByDefaultValues(this._model, this.defaultTime);\r\n      }\r\n    }\r\n    this._updateHourMinuteSecond();\r\n  }\r\n\r\n  /** Registers a callback function that is called when the control's value changes in the UI. */\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called when the control receives a touch event.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Enables or disables the appropriate DOM element */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled = isDisabled;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Format input\r\n   * @param input \r\n   */\r\n  public formatInput(input: HTMLInputElement) {\r\n    input.value = input.value.replace(NUMERIC_REGEX, '');\r\n  }\r\n\r\n  /** Toggle meridian */\r\n  public toggleMeridian() {\r\n    this.meridian = (this.meridian === MERIDIANS.AM) ? MERIDIANS.PM : MERIDIANS.AM;\r\n    this.change('hour');\r\n  }\r\n\r\n  /** Change property of time */\r\n  public change(prop: string, up?: boolean) {\r\n    const next = this._getNextValueByProp(prop, up);\r\n    this.form.controls[prop].setValue(formatTwoDigitTimeValue(next), { onlySelf: false, emitEvent: false });\r\n    this._updateModel();\r\n  }\r\n\r\n  /** Update controls of form by model */\r\n  private _updateHourMinuteSecond() {\r\n    let _hour = this._dateAdapter.getHour(this._model);\r\n    const _minute = this._dateAdapter.getMinute(this._model);\r\n    const _second = this._dateAdapter.getSecond(this._model);\r\n\r\n    if (this.enableMeridian) {\r\n      if (_hour >= LIMIT_TIMES.meridian) {\r\n        _hour = _hour - LIMIT_TIMES.meridian;\r\n        this.meridian = MERIDIANS.PM;\r\n      } else {\r\n        this.meridian = MERIDIANS.AM;\r\n      }\r\n      if (_hour === 0) {\r\n        _hour = LIMIT_TIMES.meridian;\r\n      }\r\n    }\r\n\r\n    this.form.controls['hour'].setValue(formatTwoDigitTimeValue(_hour));\r\n    this.form.controls['minute'].setValue(formatTwoDigitTimeValue(_minute));\r\n    this.form.controls['second'].setValue(formatTwoDigitTimeValue(_second));\r\n  }\r\n\r\n  /** Update model */\r\n  private _updateModel() {\r\n    let _hour = this.hour;\r\n\r\n    if (this.enableMeridian) {\r\n      if (this.meridian === MERIDIANS.AM && _hour === LIMIT_TIMES.meridian) {\r\n        _hour = 0;\r\n      } else if (this.meridian === MERIDIANS.PM && _hour !== LIMIT_TIMES.meridian) {\r\n        _hour = _hour + LIMIT_TIMES.meridian;\r\n      }\r\n    }\r\n\r\n    this._dateAdapter.setHour(this._model, _hour);\r\n    this._dateAdapter.setMinute(this._model, this.minute);\r\n    this._dateAdapter.setSecond(this._model, this.second);\r\n    this._onChange(this._model);\r\n  }\r\n\r\n  /**\r\n   * Get next value by property\r\n   * @param prop \r\n   * @param up\r\n   */\r\n  private _getNextValueByProp(prop: string, up?: boolean): number {\r\n    const keyProp = prop[0].toUpperCase() + prop.slice(1);\r\n    const min = LIMIT_TIMES[`min${keyProp}`];\r\n    let max = LIMIT_TIMES[`max${keyProp}`];\r\n\r\n    if (prop === 'hour' && this.enableMeridian) {\r\n      max = LIMIT_TIMES.meridian;\r\n    }\r\n\r\n    let next;\r\n    if (up == null) {\r\n      next = this[prop] % (max);\r\n      if (prop === 'hour' && this.enableMeridian) {\r\n        if (next === 0) next = max;\r\n      }\r\n    } else {\r\n      next = up ? this[prop] + this[`step${keyProp}`] : this[prop] - this[`step${keyProp}`];\r\n      if (prop === 'hour' && this.enableMeridian) {\r\n        next = next % (max + 1);\r\n        if (next === 0) next = up ? 1 : max;\r\n      } else {\r\n        next = next % max;\r\n      }\r\n      if (up) {\r\n        next = next > max ? (next - max + min) : next;\r\n      } else {\r\n        next = next < min ? (next - min + max) : next;\r\n      }\r\n\r\n    }\r\n\r\n    return next;\r\n  }\r\n\r\n  /**\r\n   * Set disable states\r\n   */\r\n  private _setDisableStates() {\r\n    if (this.disabled) {\r\n      this.form.disable();\r\n    }\r\n    else {\r\n      this.form.enable();\r\n      if (this.disableMinute) {\r\n        this.form.get('minute').disable();\r\n        if (this.showSeconds) {\r\n          this.form.get('second').disable();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"form\">\r\n  <table class=\"ngx-mat-timepicker-table\">\r\n    <tbody class=\"ngx-mat-timepicker-tbody\">\r\n      <tr *ngIf=\"showSpinners\">\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_less icon\" (click)=\"change('hour', true)\"\r\n            [disabled]=\"disabled\">\r\n            <mat-icon>expand_less</mat-icon>\r\n          </button>\r\n        </td>\r\n        <td></td>\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_less icon\" (click)=\"change('minute', true)\"\r\n            [disabled]=\"disabled || disableMinute\">\r\n            <mat-icon>expand_less</mat-icon>\r\n          </button> </td>\r\n        <td></td>\r\n        <td *ngIf=\"showSeconds\">\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_less icon\" (click)=\"change('second', true)\"\r\n            [disabled]=\"disabled || disableMinute\">\r\n            <mat-icon>expand_less</mat-icon>\r\n          </button>\r\n        </td>\r\n        <td *ngIf=\"enableMeridian\" class=\"ngx-mat-timepicker-spacer\"></td>\r\n        <td *ngIf=\"enableMeridian\"></td>\r\n      </tr>\r\n\r\n      <tr>\r\n        <td>\r\n          <mat-form-field appearance=\"legacy\">\r\n            <input type=\"text\" matInput (input)=\"formatInput($any($event).target)\" maxlength=\"2\" formControlName=\"hour\"\r\n              (keydown.ArrowUp)=\"change('hour', true); $event.preventDefault()\"\r\n              (keydown.ArrowDown)=\"change('hour', false); $event.preventDefault()\" (blur)=\"change('hour')\">\r\n          </mat-form-field>\r\n        </td>\r\n        <td class=\"ngx-mat-timepicker-spacer\">&#58;</td>\r\n        <td>\r\n          <mat-form-field appearance=\"legacy\">\r\n            <input type=\"text\" matInput (input)=\"formatInput($any($event).target)\" maxlength=\"2\"\r\n              formControlName=\"minute\" (keydown.ArrowUp)=\"change('minute', true); $event.preventDefault()\"\r\n              (keydown.ArrowDown)=\"change('minute', false); $event.preventDefault()\" (blur)=\"change('minute')\">\r\n          </mat-form-field>\r\n        </td>\r\n        <td *ngIf=\"showSeconds\" class=\"ngx-mat-timepicker-spacer\">&#58;</td>\r\n        <td *ngIf=\"showSeconds\">\r\n          <mat-form-field appearance=\"legacy\">\r\n            <input type=\"text\" matInput (input)=\"formatInput($any($event).target)\" maxlength=\"2\"\r\n              formControlName=\"second\" (keydown.ArrowUp)=\"change('second', true); $event.preventDefault()\"\r\n              (keydown.ArrowDown)=\"change('second', false); $event.preventDefault()\" (blur)=\"change('second')\">\r\n          </mat-form-field>\r\n        </td>\r\n\r\n        <td *ngIf=\"enableMeridian\" class=\"ngx-mat-timepicker-spacer\"></td>\r\n        <td *ngIf=\"enableMeridian\" class=\"ngx-mat-timepicker-meridian\">\r\n          <button mat-button (click)=\"toggleMeridian()\" mat-stroked-button [color]=\"color\" [disabled]=\"disabled\">\r\n            {{meridian}}\r\n          </button>\r\n        </td>\r\n      </tr>\r\n\r\n      <tr *ngIf=\"showSpinners\">\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_more icon\" (click)=\"change('hour', false)\"\r\n            [disabled]=\"disabled\">\r\n            <mat-icon>expand_more</mat-icon>\r\n          </button> </td>\r\n        <td></td>\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_more icon\" (click)=\"change('minute', false)\"\r\n            [disabled]=\"disabled || disableMinute\">\r\n            <mat-icon>expand_more</mat-icon>\r\n          </button> </td>\r\n        <td *ngIf=\"showSeconds\"></td>\r\n        <td *ngIf=\"showSeconds\">\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_more icon\" (click)=\"change('second', false)\"\r\n            [disabled]=\"disabled || disableMinute\">\r\n            <mat-icon>expand_more</mat-icon>\r\n          </button>\r\n        </td>\r\n        <td *ngIf=\"enableMeridian\" class=\"ngx-mat-timepicker-spacer\"></td>\r\n        <td *ngIf=\"enableMeridian\"></td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</form>","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { Overlay, OverlayConfig, OverlayRef, PositionStrategy, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { ComponentPortal, ComponentType, TemplatePortal } from '@angular/cdk/portal';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentRef, ContentChild, ElementRef, EventEmitter, Inject, Input, NgZone, OnDestroy, Optional, Output, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';\r\nimport { ValidationErrors } from '@angular/forms';\r\nimport { CanColor, mixinColor, ThemePalette } from '@angular/material/core';\r\nimport { MatCalendarCellCssClasses, matDatepickerAnimations, MAT_DATEPICKER_SCROLL_STRATEGY } from '@angular/material/datepicker';\r\nimport { MatLegacyDialog as MatDialog, MatLegacyDialogRef as MatDialogRef } from '@angular/material/legacy-dialog';\r\nimport { merge, Subject, Subscription } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { NgxMatCalendar } from './calendar';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDatetimeInput } from './datetime-input';\r\nimport { NgxMatTimepickerComponent } from './timepicker.component';\r\nimport { createMissingDateImplError, DEFAULT_STEP } from './utils/date-utils';\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n// Boilerplate for applying mixins to MatDatepickerContent.\r\n/** @docs-private */\r\nconst _MatDatetimepickerContentBase = mixinColor(\r\n  class {\r\n    constructor(public _elementRef: ElementRef) { }\r\n  },\r\n);\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * NgxMatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-datetime-content',\r\n  templateUrl: 'datetime-content.component.html',\r\n  styleUrls: ['datetime-content.component.scss'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[@transformPanel]': '\"enter\"',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n  },\r\n  animations: [\r\n    matDatepickerAnimations.transformPanel,\r\n    matDatepickerAnimations.fadeInCalendar,\r\n  ],\r\n  exportAs: 'ngxMatDatetimeContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color'],\r\n})\r\nexport class NgxMatDatetimeContent<D> extends _MatDatetimepickerContentBase\r\n  implements AfterViewInit, CanColor {\r\n\r\n  /** Reference to the internal calendar component. */\r\n  @ViewChild(NgxMatCalendar) _calendar: NgxMatCalendar<D>;\r\n\r\n  /** Reference to the internal time picker component. */\r\n  @ViewChild(NgxMatTimepickerComponent) _timePicker: NgxMatTimepickerComponent<D>;\r\n\r\n  /** Reference to the datepicker that created the overlay. */\r\n  datepicker: NgxMatDatetimePicker<D>;\r\n\r\n  /** Whether the datepicker is above or below the input. */\r\n  _isAbove: boolean;\r\n\r\n  /** Whether or not the selected date is valid (min,max...) */\r\n  get valid(): boolean {\r\n    if (this.datepicker.hideTime) return this.datepicker.valid;\r\n    return this._timePicker && this._timePicker.valid && this.datepicker.valid;\r\n  }\r\n\r\n  get isViewMonth(): boolean {\r\n    if (!this._calendar || this._calendar.currentView == null) return true;\r\n    return this._calendar.currentView == 'month';\r\n  }\r\n\r\n  _templateCustomIconPortal: TemplatePortal<any>;\r\n\r\n  constructor(elementRef: ElementRef, private cd: ChangeDetectorRef,\r\n    private _viewContainerRef: ViewContainerRef) {\r\n    super(elementRef);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._calendar.focusActiveCell();\r\n    if (this.datepicker._customIcon) {\r\n      this._templateCustomIconPortal = new TemplatePortal(\r\n        this.datepicker._customIcon,\r\n        this._viewContainerRef\r\n      );\r\n      this.cd.detectChanges();\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  selector: 'ngx-mat-datetime-picker',\r\n  template: '',\r\n  exportAs: 'ngxMatDatetimePicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NgxMatDatetimePicker<D> implements OnDestroy, CanColor {\r\n\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** An input indicating the type of the custom header component for the calendar, if set. */\r\n  @Input() calendarHeaderComponent: ComponentType<any>;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(TemplateRef) _customIcon: TemplateRef<any>;\r\n\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The view that the calendar should start in. */\r\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\r\n\r\n  /** Default Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get defaultColor(): ThemePalette {\r\n    return this._defaultColor;\r\n  }\r\n  set defaultColor(value: ThemePalette) {\r\n    this._defaultColor = value;\r\n  }\r\n  _defaultColor: ThemePalette = 'primary';\r\n\r\n  /** Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get color(): ThemePalette {\r\n    return this._color ||\r\n      (this.datepickerInput ? this.datepickerInput._getThemePalette() : 'primary');\r\n  }\r\n  set color(value: ThemePalette) {\r\n    this._color = value;\r\n  }\r\n  _color: ThemePalette;\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean { return this._touchUi; }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = false;\r\n\r\n  @Input()\r\n  get hideTime(): boolean { return this._hideTime; }\r\n  set hideTime(value: boolean) {\r\n    this._hideTime = coerceBooleanProperty(value);\r\n  }\r\n  public _hideTime = false;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this.datepickerInput ?\r\n      this.datepickerInput.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this.stateChanges.next(newValue);\r\n    }\r\n  }\r\n  public _disabled: boolean;\r\n\r\n  /**\r\n   * Emits selected year in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits selected month in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { value ? this.open() : this.close(); }\r\n  private _opened = false;\r\n\r\n  /** Whether the timepicker'spinners is shown. */\r\n  @Input()\r\n  get showSpinners(): boolean { return this._showSpinners; }\r\n  set showSpinners(value: boolean) { this._showSpinners = value; }\r\n  public _showSpinners = true;\r\n\r\n  /** Whether the second part is disabled. */\r\n  @Input()\r\n  get showSeconds(): boolean { return this._showSeconds; }\r\n  set showSeconds(value: boolean) { this._showSeconds = value; }\r\n  public _showSeconds = false;\r\n\r\n  /** Step hour */\r\n  @Input()\r\n  get stepHour(): number { return this._stepHour; }\r\n  set stepHour(value: number) { this._stepHour = value; }\r\n  public _stepHour: number = DEFAULT_STEP;\r\n\r\n  /** Step minute */\r\n  @Input()\r\n  get stepMinute(): number { return this._stepMinute; }\r\n  set stepMinute(value: number) { this._stepMinute = value; }\r\n  public _stepMinute: number = DEFAULT_STEP;\r\n\r\n  /** Step second */\r\n  @Input()\r\n  get stepSecond(): number { return this._stepSecond; }\r\n  set stepSecond(value: number) { this._stepSecond = value; }\r\n  public _stepSecond: number = DEFAULT_STEP;\r\n\r\n  /** Enable meridian */\r\n  @Input()\r\n  get enableMeridian(): boolean { return this._enableMeridian; }\r\n  set enableMeridian(value: boolean) { this._enableMeridian = value; }\r\n  public _enableMeridian: boolean = false;\r\n\r\n  /** disable minute */\r\n  @Input()\r\n  get disableMinute(): boolean { return this._disableMinute; }\r\n  set disableMinute(value: boolean) { this._disableMinute = value; }\r\n  public _disableMinute: boolean;\r\n\r\n  /** Step second */\r\n  @Input()\r\n  get defaultTime(): number[] { return this._defaultTime; }\r\n  set defaultTime(value: number[]) { this._defaultTime = value; }\r\n  public _defaultTime: number[];\r\n\r\n  private _hasBackdrop: boolean = true;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id: string = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null { return this._validSelected; }\r\n  set _selected(value: D | null) { this._validSelected = value; }\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this.datepickerInput && this.datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this.datepickerInput && this.datepickerInput.max;\r\n  }\r\n\r\n  get valid(): boolean {\r\n    const minValidators = this._minValidator();\r\n    const maxValidators = this._maxValidator();\r\n    return minValidators == null && maxValidators == null;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null) => boolean {\r\n    return this.datepickerInput && this.datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<NgxMatDatetimeContent<D>> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<NgxMatDatetimeContent<D>>;\r\n\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<NgxMatDatetimeContent<D>> | null;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  datepickerInput: NgxMatDatetimeInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly stateChanges = new Subject<boolean>();\r\n\r\n  /** Emits new selected date when selected date changes. */\r\n  readonly _selectedChanged = new Subject<D>();\r\n\r\n  /** Raw value before  */\r\n  private _rawValue: D;\r\n\r\n  constructor(private _dialog: MatDialog,\r\n    private _overlay: Overlay,\r\n    private _ngZone: NgZone,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n    this._inputSubscription.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator = (): ValidationErrors | null => {\r\n    return (!this._minDate || !this._selected ||\r\n      this._dateAdapter.compareDateWithTime(this._minDate, this._selected, this.showSeconds) <= 0) ?\r\n      null : { 'matDatetimePickerMin': { 'min': this._minDate, 'actual': this._selected } };\r\n  }\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator = (): ValidationErrors | null => {\r\n    return (!this._maxDate || !this._selected ||\r\n      this._dateAdapter.compareDateWithTime(this._maxDate, this._selected, this.showSeconds) >= 0) ?\r\n      null : { 'matDatetimePickerMax': { 'max': this._maxDate, 'actual': this._selected } };\r\n  }\r\n\r\n  /** Selects the given date */\r\n  select(date: D): void {\r\n    this._dateAdapter.copyTime(date, this._selected);\r\n    this._selected = date;\r\n  }\r\n\r\n  /** Emits the selected year in multiyear view */\r\n  _selectYear(normalizedYear: D): void {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Emits selected month in year view */\r\n  _selectMonth(normalizedMonth: D): void {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  /** OK button handler and close*/\r\n  public ok(): void {\r\n    const cloned = this._dateAdapter.clone(this._selected);\r\n    this._selectedChanged.next(cloned);\r\n    this.close();\r\n  }\r\n\r\n  /** Cancel and close */\r\n  public cancel(): void {\r\n    this._selected = this._rawValue;\r\n    this.close();\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: NgxMatDatetimeInput<D>): void {\r\n    if (this.datepickerInput) {\r\n      throw Error('A NgxMatDatepicker can only be associated with a single input.');\r\n    }\r\n    this.datepickerInput = input;\r\n    this._inputSubscription =\r\n      this.datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    this._rawValue = this._selected != null\r\n      ? this._dateAdapter.clone(this._selected) : null;\r\n\r\n    if (this._selected == null) {\r\n      this._selected = this._dateAdapter.today();\r\n      if (this.defaultTime != null) {\r\n        this._dateAdapter.setTimeByDefaultValues(this._selected, this.defaultTime);\r\n      }\r\n    }\r\n\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this.datepickerInput) {\r\n      throw Error('Attempted to open an NgxMatDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\r\n    // open at a time, however since we reset the variables in async handlers some overlays\r\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\r\n    // by holding down the enter key).\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n    }\r\n\r\n    this._dialogRef = this._dialog.open<NgxMatDatetimeContent<D>>(NgxMatDatetimeContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: 'mat-datepicker-dialog',\r\n      hasBackdrop: this._hasBackdrop\r\n    });\r\n\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n    this._setColor();\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal<NgxMatDatetimeContent<D>>(NgxMatDatetimeContent,\r\n        this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\r\n      this._popupComponentRef.instance.datepicker = this;\r\n      this._setColor();\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: this._hasBackdrop,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-datepicker-popup',\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(filter(event => {\r\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n        return event.keyCode === ESCAPE ||\r\n          (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\r\n      }))\r\n    ).subscribe(event => {\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      (this._hasBackdrop && event) ? this.cancel() : this.close();\r\n\r\n    });\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .flexibleConnectedTo(this.datepickerInput.getConnectedOverlayOrigin())\r\n      .withTransformOriginOn('.mat-datepicker-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withLockedPosition()\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Passes the current theme color along to the calendar overlay. */\r\n  private _setColor(): void {\r\n    const color = this.color;\r\n    if (this._popupComponentRef) {\r\n      this._popupComponentRef.instance.color = color;\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.componentInstance.color = color;\r\n    }\r\n  }\r\n\r\n}\r\n","<ngx-mat-calendar cdkTrapFocus [id]=\"datepicker.id\" [ngClass]=\"datepicker.panelClass\" [startAt]=\"datepicker.startAt\"\r\n    [startView]=\"datepicker.startView\" [minDate]=\"datepicker._minDate\" [maxDate]=\"datepicker._maxDate\"\r\n    [dateFilter]=\"datepicker._dateFilter\" [headerComponent]=\"datepicker.calendarHeaderComponent\"\r\n    [selected]=\"datepicker._selected\" [dateClass]=\"datepicker.dateClass\" [@fadeInCalendar]=\"'enter'\"\r\n    (selectedChange)=\"datepicker.select($event)\" (yearSelected)=\"datepicker._selectYear($event)\"\r\n    (monthSelected)=\"datepicker._selectMonth($event)\">\r\n</ngx-mat-calendar>\r\n<ng-container *ngIf=\"isViewMonth\">\r\n    <div *ngIf=\"!datepicker._hideTime\" class=\"time-container\" [class.disable-seconds]=\"!datepicker._showSeconds\">\r\n        <ngx-mat-timepicker [showSpinners]=\"datepicker._showSpinners\" [showSeconds]=\"datepicker._showSeconds\"\r\n            [disabled]=\"datepicker._disabled\" [stepHour]=\"datepicker._stepHour\" [stepMinute]=\"datepicker._stepMinute\"\r\n            [stepSecond]=\"datepicker._stepSecond\" [(ngModel)]=\"datepicker._selected\" [color]=\"datepicker._color\"\r\n            [enableMeridian]=\"datepicker._enableMeridian\" [disableMinute]=\"datepicker._disableMinute\">\r\n        </ngx-mat-timepicker>\r\n    </div>\r\n    <div class=\"actions\">\r\n        <button mat-button (click)=\"datepicker.ok()\" mat-stroked-button [color]=\"datepicker._color\" cdkFocusInitial\r\n            [disabled]=\"!valid\">\r\n            <mat-icon *ngIf=\"!datepicker._customIcon\">done</mat-icon>\r\n            <ng-template [cdkPortalOutlet]=\"_templateCustomIconPortal\"></ng-template>\r\n        </button>\r\n    </div>\r\n</ng-container>","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\r\nimport { Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, Optional, Output } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MatLegacyFormField as MatFormField } from '@angular/material/legacy-form-field';\r\nimport { MAT_LEGACY_INPUT_VALUE_ACCESSOR as MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/legacy-input';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDateFormats, NGX_MAT_DATE_FORMATS } from './core/date-formats';\r\nimport { NgxMatDatetimePicker } from './datetime-picker.component';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NgxMatDatetimeInput),\r\n    multi: true\r\n};\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_VALIDATORS: any = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => NgxMatDatetimeInput),\r\n    multi: true\r\n};\r\n\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatetimePickerInputEvent instead.\r\n */\r\nexport class MatDatetimePickerInputEvent<D> {\r\n    /** The new value for the target datepicker input. */\r\n    value: D | null;\r\n\r\n    constructor(\r\n        /** Reference to the datepicker input component that emitted the event. */\r\n        public target: NgxMatDatetimeInput<D>,\r\n        /** Reference to the native input element associated with the datepicker input. */\r\n        public targetElement: HTMLElement) {\r\n        this.value = this.target.value;\r\n    }\r\n}\r\n\r\n\r\n/** Directive used to connect an input to a matDatetimePicker. */\r\n@Directive({\r\n    selector: 'input[ngxMatDatetimePicker]',\r\n    providers: [\r\n        MAT_DATEPICKER_VALUE_ACCESSOR,\r\n        MAT_DATEPICKER_VALIDATORS,\r\n        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: NgxMatDatetimeInput },\r\n    ],\r\n    host: {\r\n        '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\r\n        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n        '[disabled]': 'disabled',\r\n        '(input)': '_onInput($event.target.value)',\r\n        '(change)': '_onChange()',\r\n        '(blur)': '_onBlur()',\r\n        '(focus)': '_onFocus()',\r\n        '(keydown)': '_onKeydown($event)',\r\n    },\r\n    exportAs: 'ngxMatDatetimePickerInput',\r\n})\r\nexport class NgxMatDatetimeInput<D> implements ControlValueAccessor, OnDestroy, Validator {\r\n    /** The datepicker that this input is associated with. */\r\n    @Input()\r\n    set ngxMatDatetimePicker(value: NgxMatDatetimePicker<D>) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        this._datepicker = value;\r\n        this._datepicker._registerInput(this);\r\n        this._datepickerSubscription.unsubscribe();\r\n\r\n        this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.dateInput.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.dateChange.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n        });\r\n    }\r\n    _datepicker: NgxMatDatetimePicker<D>;\r\n\r\n    /** Function that can be used to filter out dates within the datepicker. */\r\n    @Input()\r\n    set ngxMatDatetimePickerFilter(value: (date: D | null) => boolean) {\r\n        this._dateFilter = value;\r\n        this._validatorOnChange();\r\n    }\r\n    _dateFilter: (date: D | null) => boolean;\r\n\r\n    /** The value of the input. */\r\n    @Input()\r\n    get value(): D | null { return this._value; }\r\n    set value(value: D | null) {\r\n        value = this._dateAdapter.deserialize(value);\r\n        this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n        value = this._getValidDateOrNull(value);\r\n        const oldDate = this.value;\r\n        this._value = value;\r\n        this._formatValue(value);\r\n\r\n        if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n            this._valueChange.emit(value);\r\n        }\r\n    }\r\n    private _value: D | null;\r\n\r\n    /** The minimum valid date. */\r\n    @Input()\r\n    get min(): D | null { return this._min; }\r\n    set min(value: D | null) {\r\n        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        this._validatorOnChange();\r\n    }\r\n    private _min: D | null;\r\n\r\n    /** The maximum valid date. */\r\n    @Input()\r\n    get max(): D | null { return this._max; }\r\n    set max(value: D | null) {\r\n        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        this._validatorOnChange();\r\n    }\r\n    private _max: D | null;\r\n\r\n    /** Whether the datepicker-input is disabled. */\r\n    @Input()\r\n    get disabled(): boolean { return !!this._disabled; }\r\n    set disabled(value: boolean) {\r\n        const newValue = value != null && `${value}` !== 'false';\r\n        const element = this._elementRef.nativeElement;\r\n\r\n        if (this._disabled !== newValue) {\r\n            this._disabled = newValue;\r\n            this.stateChanges.emit(undefined);\r\n        }\r\n\r\n        // We need to null check the `blur` method, because it's undefined during SSR.\r\n        if (newValue && element.blur) {\r\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n            // is problematic, because it would mean that it triggers another change detection cycle,\r\n            // which then causes a changed after checked error if the input element was focused before.\r\n            element.blur();\r\n        }\r\n    }\r\n    private _disabled: boolean;\r\n\r\n    /** Emits when a `change` event is fired on this `<input>`. */\r\n    @Output() readonly dateChange: EventEmitter<MatDatetimePickerInputEvent<D>> =\r\n        new EventEmitter<MatDatetimePickerInputEvent<D>>();\r\n\r\n    /** Emits when an `input` event is fired on this `<input>`. */\r\n    @Output() readonly dateInput: EventEmitter<MatDatetimePickerInputEvent<D>> =\r\n        new EventEmitter<MatDatetimePickerInputEvent<D>>();\r\n\r\n    /** Emits when the value changes (either due to user input or programmatic change). */\r\n    _valueChange = new EventEmitter<D | null>();\r\n\r\n    /** Emits when the disabled state has changed */\r\n    stateChanges = new EventEmitter<void>();\r\n\r\n    _onTouched = () => { };\r\n\r\n    private _cvaOnChange: (value: any) => void = () => { };\r\n\r\n    private _validatorOnChange = () => { };\r\n\r\n    private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n    private _localeSubscription = Subscription.EMPTY;\r\n\r\n    /** The form control validator for whether the input parses. */\r\n    private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n        return this._lastValueValid ?\r\n            null : { 'matDatetimePickerParse': { 'text': this._elementRef.nativeElement.value } };\r\n    }\r\n\r\n    /** The form control validator for the min date. */\r\n    private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return (!this.min || !controlValue ||\r\n            this._dateAdapter.compareDateWithTime(this.min, controlValue, this._datepicker.showSeconds) <= 0) ?\r\n            null : { 'matDatetimePickerMin': { 'min': this.min, 'actual': controlValue } };\r\n    }\r\n\r\n    /** The form control validator for the max date. */\r\n    private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return (!this.max || !controlValue ||\r\n            this._dateAdapter.compareDateWithTime(this.max, controlValue, this._datepicker.showSeconds) >= 0) ?\r\n            null : { 'matDatetimePickerMax': { 'max': this.max, 'actual': controlValue } };\r\n    }\r\n\r\n    /** The form control validator for the date filter. */\r\n    private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n            null : { 'matDatetimePickerFilter': true };\r\n    }\r\n\r\n    /** The combined form control validator for this input. */\r\n    private _validator: ValidatorFn | null =\r\n        Validators.compose(\r\n            [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\r\n\r\n    /** Whether the last value set on the input was valid. */\r\n    private _lastValueValid = false;\r\n\r\n    constructor(\r\n        private _elementRef: ElementRef<HTMLInputElement>,\r\n        @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n        @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n        @Optional() private _formField: MatFormField) {\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxMatDateAdapter');\r\n        }\r\n        if (!this._dateFormats) {\r\n            throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n        }\r\n\r\n        // Update the displayed date when the locale changes.\r\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n            this.value = this.value;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._datepickerSubscription.unsubscribe();\r\n        this._localeSubscription.unsubscribe();\r\n        this._valueChange.complete();\r\n        this.stateChanges.complete();\r\n    }\r\n\r\n    /** @docs-private */\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this._validatorOnChange = fn;\r\n    }\r\n\r\n    /** @docs-private */\r\n    validate(c: AbstractControl): ValidationErrors | null {\r\n        return this._validator ? this._validator(c) : null;\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n     */\r\n    getPopupConnectionElementRef(): ElementRef {\r\n        return this.getConnectedOverlayOrigin();\r\n    }\r\n\r\n    /**\r\n     * Gets the element that the datepicker popup should be connected to.\r\n     * @return The element to connect the popup to.\r\n     */\r\n    getConnectedOverlayOrigin(): ElementRef {\r\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value: D): void {\r\n        this.value = value;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this._cvaOnChange = fn;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn: () => void): void {\r\n        this._onTouched = fn;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    _onKeydown(event: KeyboardEvent) {\r\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n\r\n        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n            this._datepicker.open();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    _onInput(value: string) {\r\n        const lastValueWasValid = this._lastValueValid;\r\n        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n        date = this._getValidDateOrNull(date);\r\n\r\n        const isSameTime = this._dateAdapter.isSameTime(date, this._value);\r\n\r\n        if ((date != null && (!isSameTime || !this._dateAdapter.sameDate(date, this._value)))\r\n            || (date == null && this._value != null)) {\r\n            this._value = date;\r\n            this._cvaOnChange(date);\r\n            this._valueChange.emit(date);\r\n            this.dateInput.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n        } else if (lastValueWasValid !== this._lastValueValid) {\r\n            this._validatorOnChange();\r\n        }\r\n    }\r\n\r\n    _onChange() {\r\n        this.dateChange.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n\r\n    /** Returns the palette used by the input's form field, if any. */\r\n    _getThemePalette(): ThemePalette {\r\n        return this._formField ? this._formField.color : undefined;\r\n    }\r\n\r\n    /** Handles blur events on the input. */\r\n    _onBlur() {\r\n        // Reformat the input only if we have a valid value.\r\n        if (this.value) {\r\n            this._formatValue(this.value);\r\n        }\r\n\r\n        this._onTouched();\r\n    }\r\n\r\n    /** Handles focus events on the input. */\r\n    _onFocus() {\r\n        // Close datetime picker if opened\r\n        if (this._datepicker && this._datepicker.opened) {\r\n            this._datepicker.cancel();\r\n        }\r\n    }\r\n\r\n    /** Formats a value and sets it on the input element. */\r\n    private _formatValue(value: D | null) {\r\n        this._elementRef.nativeElement.value =\r\n            value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\r\n    }\r\n\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private _getValidDateOrNull(obj: any): D | null {\r\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n    }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatLegacyButtonModule as MatButtonModule } from '@angular/material/legacy-button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatLegacyInputModule as MatInputModule } from '@angular/material/legacy-input';\r\nimport { NgxMatTimepickerComponent } from './timepicker.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatInputModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n  exports: [\r\n    NgxMatTimepickerComponent\r\n  ],\r\n  declarations: [\r\n    NgxMatTimepickerComponent\r\n  ]\r\n})\r\nexport class NgxMatTimepickerModule { }\r\n","import { PortalModule } from '@angular/cdk/portal';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatLegacyButtonModule as MatButtonModule } from '@angular/material/legacy-button';\r\nimport { MatDatepickerModule, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER } from '@angular/material/datepicker';\r\nimport { MatLegacyDialogModule as MatDialogModule } from '@angular/material/legacy-dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatLegacyInputModule as MatInputModule } from '@angular/material/legacy-input';\r\nimport { NgxMatCalendar, NgxMatCalendarHeader } from './calendar';\r\nimport { NgxMatCalendarBody } from './calendar-body';\r\nimport { DefaultNgxMatCalendarRangeStrategy, NGX_MAT_DATE_RANGE_SELECTION_STRATEGY } from './date-range-selection-strategy';\r\nimport { NgxMatDatetimeInput } from './datetime-input';\r\nimport { NgxMatDatetimeContent, NgxMatDatetimePicker } from './datetime-picker.component';\r\nimport { NgxMatMonthView } from './month-view';\r\nimport { NgxMatMultiYearView } from './multi-year-view';\r\nimport { NgxMatTimepickerModule } from './timepicker.module';\r\nimport { NgxMatYearView } from './year-view';\r\n\r\n@NgModule({\r\n   imports: [\r\n      CommonModule,\r\n      MatDatepickerModule,\r\n      MatDialogModule,\r\n      PortalModule,\r\n      FormsModule,\r\n      MatIconModule,\r\n      MatButtonModule,\r\n      MatInputModule,\r\n      NgxMatTimepickerModule\r\n   ],\r\n   exports: [\r\n      NgxMatDatetimePicker,\r\n      NgxMatDatetimeInput,\r\n      NgxMatCalendar,\r\n      NgxMatMonthView,\r\n      NgxMatCalendarBody,\r\n      NgxMatYearView,\r\n      NgxMatMultiYearView,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   declarations: [\r\n      NgxMatDatetimePicker,\r\n      NgxMatDatetimeContent,\r\n      NgxMatDatetimeInput,\r\n      NgxMatCalendar,\r\n      NgxMatMonthView,\r\n      NgxMatCalendarBody,\r\n      NgxMatYearView,\r\n      NgxMatMultiYearView,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   entryComponents: [\r\n      NgxMatDatetimeContent,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   providers: [\r\n      MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n      {\r\n         provide: NGX_MAT_DATE_RANGE_SELECTION_STRATEGY,\r\n         useClass: DefaultNgxMatCalendarRangeStrategy\r\n      }\r\n   ]\r\n})\r\nexport class NgxMatDatetimePickerModule { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { NgxMatDateAdapter } from './date-adapter';\r\n\r\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/** Whether the browser supports the Intl API. */\r\nlet SUPPORTS_INTL_API: boolean;\r\n\r\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\r\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\r\n// the consumer is providing a polyfilled `Map`. See:\r\n// https://github.com/Microsoft/ChakraCore/issues/3189\r\n// https://github.com/angular/components/issues/15687\r\ntry {\r\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\r\n} catch {\r\n  SUPPORTS_INTL_API = false;\r\n}\r\n\r\n/** The default month names to use if Intl API is not available. */\r\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\n\r\n\r\n/** The default date names to use if Intl API is not available. */\r\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\r\n\r\n\r\n/** The default day of the week names to use if Intl API is not available. */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n\r\n\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n */\r\nconst ISO_8601_REGEX =\r\n  /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\n@Injectable()\r\nexport class NgxMatNativeDateAdapter extends NgxMatDateAdapter<Date> {\r\n\r\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\r\n  private readonly _clampDate: boolean;\r\n\r\n  /**\r\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n   * will produce `'8/13/1800'`.\r\n   *\r\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n   * getting the string representation of a Date object from its utc representation. We're keeping\r\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n   * though.\r\n   */\r\n  useUtcForDisplay: boolean = true;\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n\r\n    // IE does its own time zone correction, so we disable this on IE.\r\n    this.useUtcForDisplay = !platform.TRIDENT;\r\n    this._clampDate = platform.TRIDENT || platform.EDGE;\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return date.getDate();\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\r\n      return range(12, i =>\r\n        this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n        this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n        this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return new Date(date.getTime());\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let result = this._createDateWithOverflow(year, month, date);\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  parse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n\r\n    if (SUPPORTS_INTL_API) {\r\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n        date = this.clone(date);\r\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n      }\r\n\r\n      displayFormat = { ...displayFormat, timeZone: 'utc' };\r\n\r\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n   * invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Date | null {\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n      // string is the right format first.\r\n      if (ISO_8601_REGEX.test(value)) {\r\n        let date = new Date(value);\r\n        if (this.isValid(date)) {\r\n          return date;\r\n        }\r\n      }\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\r\n\r\n  isValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\r\n\r\n  invalid(): Date {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  getHour(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n  getMinute(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n  getSecond(date: Date): number {\r\n    return date.getSeconds()\r\n  }\r\n\r\n  setHour(date: Date, value: number): void {\r\n    date.setHours(value);\r\n  }\r\n  setMinute(date: Date, value: number): void {\r\n    date.setMinutes(value);\r\n  }\r\n  setSecond(date: Date, value: number): void {\r\n    date.setSeconds(value);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(year: number, month: number, date: number) {\r\n    const result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\n\r\n  /**\r\n   * When converting Date object to string, javascript built-in functions may return wrong\r\n   * results because it applies its internal DST rules. The DST rules around the world change\r\n   * very frequently, and the current valid rule is not always valid in previous years though.\r\n   * We work around this problem building a new Date object which has its internal UTC\r\n   * representation with the local date and time.\r\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n   *    timeZone set to 'utc' to work fine.\r\n   * @param date Date from which we want to get the string representation according to dtf\r\n   * @returns A Date object with its UTC representation based on the passed in date info\r\n   */\r\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\r\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\r\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\r\n    const d = new Date();\r\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\r\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n    return dtf.format(d);\r\n  }\r\n}\r\n","import { NgxMatDateFormats } from './date-formats';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nconst DEFAULT_DATE_INPUT = {\r\n  year: 'numeric', month: 'numeric', day: 'numeric',\r\n  hour12: false, hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"\r\n}\r\n\r\nexport const NGX_MAT_NATIVE_DATE_FORMATS: NgxMatDateFormats = {\r\n  parse: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n  },\r\n  display: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n    monthYearLabel: { year: 'numeric', month: 'short' },\r\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { PlatformModule } from '@angular/cdk/platform';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxMatDateAdapter } from './date-adapter';\r\nimport { NgxMatNativeDateAdapter } from './native-date-adapter';\r\nimport { NGX_MAT_NATIVE_DATE_FORMATS } from './native-date-formats';\r\nimport { NGX_MAT_DATE_FORMATS } from './date-formats';\r\n\r\n\r\n@NgModule({\r\n    imports: [PlatformModule],\r\n    providers: [\r\n        { provide: NgxMatDateAdapter, useClass: NgxMatNativeDateAdapter },\r\n    ],\r\n})\r\nexport class NgxNativeDateModule { }\r\n\r\n@NgModule({\r\n    imports: [NgxNativeDateModule],\r\n    providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_NATIVE_DATE_FORMATS }],\r\n})\r\nexport class NgxMatNativeDateModule { }\r\n","/*\r\n * Public API Surface of ngx-mat-datetime-picker\r\n */\r\n\r\nexport * from './lib/calendar';\r\nexport * from './lib/calendar-body';\r\nexport * from './lib/date-range-selection-strategy';\r\nexport * from './lib/month-view';\r\nexport * from './lib/multi-year-view';\r\nexport * from './lib/year-view';\r\nexport * from './lib/datetime-picker.component';\r\nexport * from './lib/datetime-input';\r\nexport * from './lib/datetime-picker.module';\r\nexport * from './lib/timepicker.component';\r\nexport * from './lib/timepicker.module';\r\nexport * from './lib/core/date-adapter';\r\nexport * from './lib/core/native-date-adapter';\r\nexport * from './lib/core/native-date-formats';\r\nexport * from './lib/core/date-formats';\r\nexport * from './lib/core/native-date.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NgxMatDateAdapter","i3","i4.NgxMatCalendarBody","i3.NgxMatCalendarBody","i1","i2.NgxMatDateAdapter","i4","i6.NgxMatMonthView","i7.NgxMatYearView","i8.NgxMatMultiYearView","i2","i5","i7","i6.NgxMatTimepickerComponent","i7.NgxMatCalendar","i10.NgxMatDateAdapter","i11","MAT_INPUT_VALUE_ACCESSOR","MatInputModule","MatButtonModule","MatDialogModule"],"mappings":"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"}